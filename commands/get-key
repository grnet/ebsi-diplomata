#!/bin/bash

usage_string="usage: ./$(basename "$0") [OPTIONS]

Get the last created key. Exit with 2 if no created key exists. See below for
more options.

Options:
  --nr              Get the key which appears at position nr of the list, 
                    counting from one. Exit with 2 if the provided number 
                    exceeds limits.
  --export OUTFILE  Export in JWK format and return path to file
  --list            List all created keys
  --number          Number of created keys

Examples
  $ $(basename "$0") --export key.json
  $ $(basename "$0") --nr 7
  $ $(basename "$0") --list 
  $ $(basename "$0") --number 
"

usage() { echo -n "$usage_string" 1>&2; }

get_nr_keys() {
    NR_KEYS=$(./ssikit.sh key list | grep -c "\- [0-9]*:")
    echo $NR_KEYS
}

get_key() { 
    POS=$1
    if [[ "$POS" -lt 1 ]] ; then
        echo "Index cannot be less than one: ${POS} < 1"
        exit 2
    fi
    NR_KEYS=$(get_nr_keys)
    if [[ "$POS" -gt "$NR_KEYS" ]]; then
        echo "Provided number exceeds limits: ${POS} > ${NR_KEYS}"
        exit 2
    fi
    KEY=$(./ssikit.sh key list \
        | grep "\- ${POS}:" \
        | awk -F' ' '{print $3}' \
        | tr -d '"')
    echo $KEY
}

get_last_key() {
    NR_KEYS=$(get_nr_keys)
    if [ ${NR_KEYS} == 0 ]; then
        echo "No created keys found" && exit 2
    fi
    POS=${NR_KEYS}
    echo $(get_key $POS)
}

get_key_list() {
    ./ssikit.sh key list
}

export_key() {
    KEY=$1
    OUTFILE=$2
    JWK_KEY=$(echo $(./ssikit.sh key export \
        --key-format JWK \
        --priv \
        ${KEY}) \
        | awk -F'Results: ' '{print $2}')
    echo ${JWK_KEY} > ${OUTFILE}
    echo ${OUTFILE}
}


ACTION=DO_SHOW
OUTFILE=

while [[ $# -gt 0 ]]
do
    arg="$1"
    case $arg in
        --nr)
            POS="$2"
            shift
            shift
            ;;
        --export)
            ACTION=DO_EXPORT
            OUTFILE="$2"
            shift
            shift
            ;;
        --list)
            ACTION=DO_LIST
            shift
            ;;
        --number)
            ACTION=DO_COUNT
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo "[-] Unknown option: ${arg}"
            usage
            exit 1
    esac
done

cd $WALTDIR

case $ACTION in
    DO_SHOW|DO_EXPORT)
        if [ -z $POS ]; then
            KEY=$(get_last_key)
        else
            KEY=$(get_key $POS)
        fi
        if [ $ACTION == DO_SHOW ]; then
            echo $KEY
        else
            export_key $KEY $OUTFILE
        fi
        shift
        ;;
    DO_LIST)
        get_key_list
        shift
        ;;
    DO_COUNT)
        get_nr_keys
        shift
        ;;
esac

exit 0
